trigger:
  branches:
    include:
    - master
    - Develop
  paths:
    include:
    - SymptomaticApp-UI

pr:
  branches:
    include:
    - master
    - Develop
  paths:
    include:
    - SymptomaticApp-UI

variables:
  appDir: SymptomaticApp-UI
  cReg: 2107-p3-acr-P3-SymptoMedic

pool:
  vmImage: ubuntu-latest
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NodeTool@0
      displayName: node 14
      inputs:
        versionSpec: '14.x'

    - script: npm ci
      displayName: npm install
      workingDirectory: $(appDir)

    - script: npx ng build
      displayName: ng build
      workingDirectory: $(appDir)

    - script: npx ng test --browsers ChromeHeadless --watch false --code-coverage
      displayName: ng test
      workingDirectory: $(appDir)
      continueOnError: true

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SymptoMedic_Sonarcloud'
        organization: '210726-wvu-net-ext'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'SymptoMedic-Frontend'
        cliProjectName: 'SymptoMedic-Frontend'
        cliSources: '$(appDir)/src'
        extraProperties: |
          sonar.javascript.lcov.reportPaths=$(appDir)/coverage/$(appDir)/lcov.info
          sonar.coverage.exclusions=**/*.spec.ts
    - task: SonarCloudAnalyze@1
      displayName: sonar run analysis

    - task: SonarCloudPublish@1
      displayName: sonar publish analysis result
      inputs:
        pollingTimeoutSec: '300'

- stage: Docker
  jobs:
    - job: Docker_Build
      displayName: Docker Build & Push
      steps:
      #Login
      - task: Docker@2
        displayName: Login
        inputs:
          containerRegistry: $(cReg)
          command: 'login'
      #Build
      - task: Docker@2
        displayName: Build & Push
        inputs:
          containerRegistry: '$(cReg)'
          repository: 'kwedwick/symptomedic-ui'
          command: 'buildAndPush'
          Dockerfile: '**/dockerfile'
          tags: 'latest'
      #Publish artifact
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(appDir)/symptomaticappui.yml'
          artifact: 'manifest'
          publishLocation: 'pipeline'
      #logout
      - task: Docker@2
        displayName: Logout
        inputs:
          containerRegistry: $(cReg)
          command: 'logout'
