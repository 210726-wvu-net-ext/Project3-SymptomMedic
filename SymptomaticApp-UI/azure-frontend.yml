trigger:
  branches:
    include:
    - master
    - Develop
  paths:
    include:
    - SymptomaticApp-UI

pr:
  branches:
    include:
    - master
    - Develop
  paths:
    include:
    - SymptomaticApp-UI

variables:
  appDir: SymptomaticApp-UI
  cReg1: '2107-p3-acr-P3-SymptoMedic'
  cReg2: 'kwedwick/symptomedic-ui'
  ImageName: 'kwedwick/symptomedic-ui'

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      displayName: node 14
      inputs:
        versionSpec: '14.x'

    - script: npm ci
      displayName: npm install
      workingDirectory: $(appDir)

    - script: npx ng build
      displayName: ng build
      workingDirectory: $(appDir)
    
    # - task: PublishBuildArtifacts@1
    #   inputs:
    #         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #         ArtifactName: 'drop'
    #         publishLocation: 'Container'

    - script: npx ng test --browsers ChromeHeadless --watch false --code-coverage || true
      displayName: ng test
      workingDirectory: $(appDir)

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SymptoMedic_Sonarcloud'
        organization: '210726-wvu-net-ext'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'SymptoMedic-Frontend'
        cliProjectName: 'SymptoMedic-Frontend'
        cliSources: '$(appDir)/src'
        extraProperties: |
          sonar.javascript.lcov.reportPaths=$(appDir)/coverage/$(appDir)/lcov.info
          sonar.coverage.exclusions=**/*.spec.ts
    - task: SonarCloudAnalyze@1
      displayName: sonar run analysis

    - task: SonarCloudPublish@1
      displayName: sonar publish analysis result
      inputs:
        pollingTimeoutSec: '300'

# - stage: Docker
#   jobs:
#     - job: Docker_Build
#       displayName: Login to ACR
#       steps:
#       - task: Docker@2
#         displayName: Login to ACR
#         inputs:
#           command: login
#           containerRegistry: $(cReg1)
#       - task: Docker@2
#         displayName: Login to Docker Hub
#         inputs:
#           command: login
#           containerRegistry: $(cReg1)
#       - task: Docker@2
#         displayName: Build and Push
#         inputs:
#           command: buildAndPush
#           containerRegistry: '$(cReg)'
#           Dockerfile: '**/Dockerfile'
#           # tags: |
#           #   tag1
#           #   tag2
#       - task: Docker@2
#         displayName: Logout of ACR
#         inputs:
#           command: logout
#           containerRegistry: $(cReg1)

- stage: Docker
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build and push Docker image
    steps:
    - task: Docker@1
      displayName: 'Build the Docker image'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Connection'
        command: 'Build an image'
        dockerFile: '**/Dockerfile'
        imageName: '$(ImageName)'
        useDefaultContext: false
        buildContext: '.'
    
    - task: Docker@1
      displayName: 'Push the Docker image to Dockerhub'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Connection'
        command: 'Push an image'
        imageName: '$(ImageName)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: '2107-p3-acr-P3-SymptoMedic'
        dockerComposeFile: 'docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'rm --all'
        nopIfNoDockerComposeFile: true