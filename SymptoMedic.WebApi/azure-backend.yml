trigger:
  branches:
    include:
    - master
    - Develop
  paths:
    include:
    - SymptoMedic.WebApi

pr:
  branches:
    include:
    - master
    - Develop
  paths:
    include:
    - SymptomaticApp-UI

pool:
  vmImage: 'windows-latest'

variables:
  solution: './SymptoMedic.WebApi/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  symptDirectory: './SymptoMedic.WebApi'
  ImageName: 'kwedwick/symptomedic-api'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SymptoMedic_Sonarcloud'
        organization: '210726-wvu-net-ext'
        scannerMode: 'MSBuild'
        projectKey: 'SymptoMedic-Backend'
        projectName: 'SymptoMedic-Backend'
        extraProperties: |
          sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/*/coverage.opencover.xml

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - script: dotnet test
        --configuration Release
        --collect:"XPlat Code Coverage"
        --results-directory $(Agent.TempDirectory)
        --
        DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      displayName: dotnet test
      workingDirectory: $(symptDirectory)

    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud analysis'

    - task: SonarCloudPublish@1
      displayName: 'Publish results on build summary'

- stage: Docker
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build and push Docker image
    steps:
    - task: Docker@1
      displayName: 'Build the Docker image'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Connection'
        command: 'Build an image'
        dockerFile: '**/Dockerfile'
        imageName: '$(ImageName)'
        useDefaultContext: false
        buildContext: '.'
    
    - task: Docker@1
      displayName: 'Push the Docker image to Dockerhub'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Connection'
        command: 'Push an image'
        imageName: '$(ImageName)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: '2107-p3-acr-P3-SymptoMedic'
        dockerComposeFile: 'docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'rm --all'
        nopIfNoDockerComposeFile: true